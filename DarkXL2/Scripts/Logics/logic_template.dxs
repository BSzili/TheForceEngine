///////////////////////////////////////////////////////////////////////////////////
// Logic Script Template
//
// This is a template for logics - to create a new Logic Script, copy this template
// and rename it to "logic_NAME" where NAME is whatever you want to call it.
//
// The functions in this file will be called automatically - if you do not
// need the functionality (for example, you don't need to tick() every frame), then
// remove the function.
//
// You should, at minimum, have start() to setup the initial state and message mask
// and handleMessage() to handle collisions, damage, etc..
// Add tick() only if the script needs to do processing every frame, such as
// enemies or NPCs wandering around. However, there may be cases where the script
// doesn't need to handle events and just ticks - like the "Update" logic.
///////////////////////////////////////////////////////////////////////////////////
// Logic Scripts can access the global variable 'self' to access object attributes.
// Some of those attributes are read-only and will cause a compile error if changed.
//
// Logic scripts also have access to 'param' which are the logic parameters
// specified by the spawning script or the 'O' file in the level data.
//
// Generators have access to 'genParam' instead of 'param' for their setup.
// ** Read the scripting documentation for more information **
///////////////////////////////////////////////////////////////////////////////////

// Start is called when the object is spawned.
void start()
{
}

// Stop is called when the object is despawned.
void stop()
{
}

// Tick is called at a fixed rate.
void tick()
{
}

// Handle message is called when specific events occur, such as
// when another object collides with the current object or when
// the object is shot or is subject to an explosion.
void handleMessage(int msgId, int arg0, int arg1)
{
}
