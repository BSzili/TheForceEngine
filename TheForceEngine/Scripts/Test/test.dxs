void main()
{
	print("Hello world\n");
}

/*
enum ObjectFlags
{
	OFLAG_ACTIVE = (1 << 0),
};

Object:
{
	// Object
	int objectId;	// Cannot change
	int sectorId;	// Cannot change directly
	Vec3f pos;		// Cannot change directly
	float angles[]; // ANGLE_PITCH, ANGLE_YAW, ANGLE_ROLL
	
	// Script
	uint messageMask;	// Which messages the object will recieve.
	
	// Logic
	int hp;
	int flags;			// tick() is only called if OFLAG_ACTIVE is set in flags.
}
*/

// Logics layout:
// self = current object
void start()
{
	self.hp = 10;
	self.messageMask = LOGIC_MSG_COLLISION_BIT | LOGIC_MSG_DAMAGE_BIT | LOGIC_MSG_ANIMATION_END_BIT;
	DXL2_ClearFlags(self.flags);	// not active yet.
}

void stop()
{
}

void tick()
{
}

void handleMessage(int msgId, float arg0, float arg1)
{
	switch (msgId)
	{
		case LOGIC_MSG_COLLISION:
			int objectId = (int)arg0;
			if (DXL2_IsObjectPlayer(objectId))
			{
				// stuff
			}
		break;
		case LOGIC_MSG_DAMAGE:
			int dmgAmount = (int)arg0;
			self.hp -= dmgAmount;
			if (self.hp <= 0)
			{
				// objectID, animationID, looping, send message when finished
				DXL2_PlayAnimation(self.objectId, ANIMATION_DYING, /*looping*/false, /*end message*/true);
			}
			else if (!DXL2_IsFlagSet(self.flags, OFLAG_ACTIVE))
			{
				DXL2_SetFlag(self.flags, OFLAG_ACTIVE);
				//DXL2_PlaySound(...);
			}
		break;
		case LOGIC_MSG_ANIMATION_END:
			if (self.hp <= 0)
			{
				DXL2_Despawn(self.objectId);
				// name, object class, position, angles
				int newObjectId = DXL2_Spawn("IST-GUNI", SPAWN_CLASS_FRAME, self.pos, self.angles, self.sectorId);
				DXL2_AddLogic(newObjectId, LOGIC_RIFLE);
				DXL2_AddLogicParameter(newObjectId, LOGIC_PARAM_HEIGHT, -3);
			}
		break;
	};
}
